#include "rusefi_hw_enums.h"
// was generated automatically by rusEFI tool  from rusefi_hw_enums.h // by enum2string.jar tool on Mon Jul 12 21:09:56 EDT 2021
// see also gen_config_and_enums.bat



const char *getAdc_channel_e(adc_channel_e value){
switch(value) {
case EFI_ADC_0:
  return "EFI_ADC_0";
case EFI_ADC_1:
  return "EFI_ADC_1";
case EFI_ADC_10:
  return "EFI_ADC_10";
case EFI_ADC_11:
  return "EFI_ADC_11";
case EFI_ADC_12:
  return "EFI_ADC_12";
case EFI_ADC_13:
  return "EFI_ADC_13";
case EFI_ADC_14:
  return "EFI_ADC_14";
case EFI_ADC_15:
  return "EFI_ADC_15";
case EFI_ADC_2:
  return "EFI_ADC_2";
case EFI_ADC_3:
  return "EFI_ADC_3";
case EFI_ADC_4:
  return "EFI_ADC_4";
case EFI_ADC_5:
  return "EFI_ADC_5";
case EFI_ADC_6:
  return "EFI_ADC_6";
case EFI_ADC_7:
  return "EFI_ADC_7";
case EFI_ADC_8:
  return "EFI_ADC_8";
case EFI_ADC_9:
  return "EFI_ADC_9";
case EFI_ADC_ERROR:
  return "EFI_ADC_ERROR";
case EFI_ADC_LAST_CHANNEL:
  return "EFI_ADC_LAST_CHANNEL";
case EFI_ADC_NONE:
  return "EFI_ADC_NONE";
  }
 return NULL;
}
const char *getBrain_pin_diag_e(brain_pin_diag_e value){
switch(value) {
case PIN_DRIVER_OVERTEMP:
  return "PIN_DRIVER_OVERTEMP";
case PIN_INVALID:
  return "PIN_INVALID";
case PIN_OK:
  return "PIN_OK";
case PIN_OPEN:
  return "PIN_OPEN";
case PIN_OVERLOAD:
  return "PIN_OVERLOAD";
case PIN_SHORT_TO_BAT:
  return "PIN_SHORT_TO_BAT";
case PIN_SHORT_TO_GND:
  return "PIN_SHORT_TO_GND";
  }
 return NULL;
}
const char *getBrain_pin_e(brain_pin_e value){
switch(value) {
case GPIOA_0:
  return "GPIOA_0";
case GPIOA_1:
  return "GPIOA_1";
case GPIOA_10:
  return "GPIOA_10";
case GPIOA_11:
  return "GPIOA_11";
case GPIOA_12:
  return "GPIOA_12";
case GPIOA_13:
  return "GPIOA_13";
case GPIOA_14:
  return "GPIOA_14";
case GPIOA_15:
  return "GPIOA_15";
case GPIOA_16:
  return "GPIOA_16";
case GPIOA_17:
  return "GPIOA_17";
case GPIOA_2:
  return "GPIOA_2";
case GPIOA_3:
  return "GPIOA_3";
case GPIOA_4:
  return "GPIOA_4";
case GPIOA_5:
  return "GPIOA_5";
case GPIOA_6:
  return "GPIOA_6";
case GPIOA_7:
  return "GPIOA_7";
case GPIOA_8:
  return "GPIOA_8";
case GPIOA_9:
  return "GPIOA_9";
case GPIOB_0:
  return "GPIOB_0";
case GPIOB_1:
  return "GPIOB_1";
case GPIOB_10:
  return "GPIOB_10";
case GPIOB_11:
  return "GPIOB_11";
case GPIOB_12:
  return "GPIOB_12";
case GPIOB_13:
  return "GPIOB_13";
case GPIOB_14:
  return "GPIOB_14";
case GPIOB_15:
  return "GPIOB_15";
case GPIOB_16:
  return "GPIOB_16";
case GPIOB_17:
  return "GPIOB_17";
case GPIOB_2:
  return "GPIOB_2";
case GPIOB_3:
  return "GPIOB_3";
case GPIOB_4:
  return "GPIOB_4";
case GPIOB_5:
  return "GPIOB_5";
case GPIOB_6:
  return "GPIOB_6";
case GPIOB_7:
  return "GPIOB_7";
case GPIOB_8:
  return "GPIOB_8";
case GPIOB_9:
  return "GPIOB_9";
case GPIOC_0:
  return "GPIOC_0";
case GPIOC_1:
  return "GPIOC_1";
case GPIOC_10:
  return "GPIOC_10";
case GPIOC_11:
  return "GPIOC_11";
case GPIOC_12:
  return "GPIOC_12";
case GPIOC_13:
  return "GPIOC_13";
case GPIOC_14:
  return "GPIOC_14";
case GPIOC_15:
  return "GPIOC_15";
case GPIOC_16:
  return "GPIOC_16";
case GPIOC_17:
  return "GPIOC_17";
case GPIOC_2:
  return "GPIOC_2";
case GPIOC_3:
  return "GPIOC_3";
case GPIOC_4:
  return "GPIOC_4";
case GPIOC_5:
  return "GPIOC_5";
case GPIOC_6:
  return "GPIOC_6";
case GPIOC_7:
  return "GPIOC_7";
case GPIOC_8:
  return "GPIOC_8";
case GPIOC_9:
  return "GPIOC_9";
case GPIOD_0:
  return "GPIOD_0";
case GPIOD_1:
  return "GPIOD_1";
case GPIOD_10:
  return "GPIOD_10";
case GPIOD_11:
  return "GPIOD_11";
case GPIOD_12:
  return "GPIOD_12";
case GPIOD_13:
  return "GPIOD_13";
case GPIOD_14:
  return "GPIOD_14";
case GPIOD_15:
  return "GPIOD_15";
case GPIOD_16:
  return "GPIOD_16";
case GPIOD_17:
  return "GPIOD_17";
case GPIOD_2:
  return "GPIOD_2";
case GPIOD_3:
  return "GPIOD_3";
case GPIOD_4:
  return "GPIOD_4";
case GPIOD_5:
  return "GPIOD_5";
case GPIOD_6:
  return "GPIOD_6";
case GPIOD_7:
  return "GPIOD_7";
case GPIOD_8:
  return "GPIOD_8";
case GPIOD_9:
  return "GPIOD_9";
case GPIOE_0:
  return "GPIOE_0";
case GPIOE_1:
  return "GPIOE_1";
case GPIOE_10:
  return "GPIOE_10";
case GPIOE_11:
  return "GPIOE_11";
case GPIOE_12:
  return "GPIOE_12";
case GPIOE_13:
  return "GPIOE_13";
case GPIOE_14:
  return "GPIOE_14";
case GPIOE_15:
  return "GPIOE_15";
case GPIOE_16:
  return "GPIOE_16";
case GPIOE_17:
  return "GPIOE_17";
case GPIOE_2:
  return "GPIOE_2";
case GPIOE_3:
  return "GPIOE_3";
case GPIOE_4:
  return "GPIOE_4";
case GPIOE_5:
  return "GPIOE_5";
case GPIOE_6:
  return "GPIOE_6";
case GPIOE_7:
  return "GPIOE_7";
case GPIOE_8:
  return "GPIOE_8";
case GPIOE_9:
  return "GPIOE_9";
case GPIO_INVALID:
  return "GPIO_INVALID";
case GPIO_UNASSIGNED:
  return "GPIO_UNASSIGNED";
case TLE6240_PIN_1:
  return "TLE6240_PIN_1";
case TLE6240_PIN_10:
  return "TLE6240_PIN_10";
case TLE6240_PIN_11:
  return "TLE6240_PIN_11";
case TLE6240_PIN_12:
  return "TLE6240_PIN_12";
case TLE6240_PIN_13:
  return "TLE6240_PIN_13";
case TLE6240_PIN_14:
  return "TLE6240_PIN_14";
case TLE6240_PIN_15:
  return "TLE6240_PIN_15";
case TLE6240_PIN_16:
  return "TLE6240_PIN_16";
case TLE6240_PIN_2:
  return "TLE6240_PIN_2";
case TLE6240_PIN_3:
  return "TLE6240_PIN_3";
case TLE6240_PIN_4:
  return "TLE6240_PIN_4";
case TLE6240_PIN_5:
  return "TLE6240_PIN_5";
case TLE6240_PIN_6:
  return "TLE6240_PIN_6";
case TLE6240_PIN_7:
  return "TLE6240_PIN_7";
case TLE6240_PIN_8:
  return "TLE6240_PIN_8";
case TLE6240_PIN_9:
  return "TLE6240_PIN_9";
  }
 return NULL;
}
const char *getPin_mode_e(pin_mode_e value){
switch(value) {
case PO_DEFAULT:
  return "PO_DEFAULT";
case PO_OPENDRAIN:
  return "PO_OPENDRAIN";
case PO_PULLDOWN:
  return "PO_PULLDOWN";
case PO_PULLUP:
  return "PO_PULLUP";
  }
 return NULL;
}
