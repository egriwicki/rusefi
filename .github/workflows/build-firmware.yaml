name: Firmware at GHA

#
# this github action uses generate_matrix.sh to scan the file system and automatically produce build matrix!
#

on:
  push:
  pull_request:
  schedule:
    # this produces GitHub nightly releases https://github.com/rusefi/rusefi/releases
    # by the way GitHub actions use UTC https://www.utctime.net/ which matches GMT time
    - cron: '10 23 * * *'
  workflow_dispatch:
    inputs:
      lts:
        description: 'LTS Build'
        required: false
        type: boolean
jobs:
  build-libopenblt-linux:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: cmake configure libopenblt
        working-directory: ./firmware/ext/openblt/Host/Source/LibOpenBLT/build
        run: cmake -DCMAKE_BUILD_TYPE=Release ..

#      - name: make libopenblt
#        working-directory: ./firmware/ext/openblt/Host/Source/LibOpenBLT/build
#        run: make -j8

      - name: cmake configure libopenblt_jni
        working-directory: ./misc/libopenblt_jni/build
        run: cmake -DCMAKE_BUILD_TYPE=Release ..

#    - name: make libopenblt_jni
#      working-directory: ./misc/libopenblt_jni/build
#      run: make -j8

      - name: coalesce
        if: 0
        run: |
          mkdir deliver
          cp ./firmware/ext/openblt/Host/libopenblt.so deliver/
          cp ./misc/libopenblt_jni/build/libopenblt_jni.so deliver/

#      - uses: actions/upload-artifact@v4
#        if: 0
#        name: libopenblt-linux
#        path: |
#          ./deliver/libopenblt.so
#          ./deliver/libopenblt_jni.so

  release:
    runs-on: ubuntu-latest
    steps:

    - name: Dump GitHub context
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: echo "$GITHUB_CONTEXT"

    - name: Set run condition variables
      run: |
        if [ "${{github.event_name}}" = "schedule" ] && [ "${{github.repository}}" = "rusefi/rusefi" ]; then
          echo "full=true" >> $GITHUB_ENV
          echo "upload=release" >> $GITHUB_ENV
          echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_ENV
        fi

    - uses: mukunku/tag-exists-action@v1.6.0
      id: checkTag
      with:
        tag: ${{ env.date }}

    - name: Create Release Tag
      if: ${{ env.full == 'true' && env.upload == 'release' && steps.checkTag.outputs.exists == 'false' }}
      id: tag
      uses: mathieudutour/github-tag-action@v6.2
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        custom_tag: ${{ env.date }}
        tag_prefix: ''

    - name: Create Release
      if: ${{ env.full == 'true' && env.upload == 'release' }}
      uses: ncipollo/release-action@v1.14.0
      with:
        tag: ${{ env.date }}
        name: "Nightly ${{ env.date }}"
        artifacts: "artifacts/rusefi_bundle_*.zip"
        replacesArtifacts: false
        token: ${{ secrets.NIGHTLY_RELEASE_ACCESS_TOKEN }}
        allowUpdates: true
        prerelease: true

    - name: coalesce
      if: 0
      run: |
        mkdir deliver
        cp ./firmware/ext/openblt/Host/libopenblt.dylib deliver/
        cp ./misc/libopenblt_jni/build/libopenblt_jni.dylib deliver/

    - uses: actions/upload-artifact@v4
      with:
        name: bootcommander-linux
        path: |
          ./deliver/libopenblt.dylib
          ./deliver/libopenblt_jni.dylib

  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - uses: actions/checkout@v4

    - name: Set matrix
      id: set-matrix
      run: |
        export EVENT_NAME="${{github.event_name}}"
        export RUN_ATTEMPT="${{github.run_attempt}}"
        read -d '' COMMIT_MESSAGE << EOM || true
        ${{ github.event.head_commit.message }}
        EOM
        export COMMIT_MESSAGE
        echo "matrix=$(bash firmware/bin/generate_matrix.sh)" >> $GITHUB_OUTPUT

  build-firmware:
    runs-on: ubuntu-latest
    needs: [
             # todo proper build of build-libopenblt #5866
      #build-libopenblt-linux,
      #build-libopenblt-macos,
            release,
            generate-matrix]
    if: ${{ ! contains(needs.generate-matrix.outputs.matrix, '[]') }}
    strategy:
      # Let all builds finish even if one fails early
      fail-fast: false
      matrix: ${{fromJson(needs.generate-matrix.outputs.matrix)}}

    steps:
    - name: Check branch name
      if: ${{ contains(github.ref_name, '.') }}
      run: echo '::error::Branch names must not contain ".", this breaks firmware autoupdates.' && exit 1

    - uses: actions/checkout@v4

    - name: Set run condition variables
      run: |
        if [ "${{github.event_name}}" == "schedule" ] && [ "${{github.repository}}" == "rusefi/rusefi" ]; then
          echo 'upload="ini"' >> $GITHUB_OUTPUT
          echo 'artifacts="bundle autoupdate"' >> $GITHUB_OUTPUT
        elif [ "${{github.event_name}}" = "push" ]\
        && [ "${{github.ref}}" = "refs/heads/master" ]\
        || [ "${{toJSON(inputs.lts)}}" = "true" ]; then
          echo 'upload="ini bundles"' >> $GITHUB_OUTPUT
          echo 'artifacts="bundle autoupdate"' >> $GITHUB_OUTPUT
        else
          echo 'artifacts="dfu bin hex map elf"' >> $GITHUB_OUTPUT
        fi

    - uses: ./.github/workflows/custom-board-build
      with:
        rusefi_dir: .
        meta_info: ./firmware/${{matrix.meta-info}}
        meta_output: ./firmware
        bundle_simulator: true
        push: false
        lts: ${{inputs.lts}}
        artifacts: ${{steps.set-upload.outputs.artifacts}}
        uploads: ${{steps.set-upload.outputs.upload}}
        MY_REPO_PAT: ${{secrets.MY_REPO_PAT}}
        RUSEFI_ONLINE_FTP_USER: ${{secrets.RUSEFI_ONLINE_FTP_USER}}
        RUSEFI_ONLINE_FTP_PASS: ${{secrets.RUSEFI_ONLINE_FTP_PASS}}
        RUSEFI_FTP_SERVER: ${{secrets.RUSEFI_FTP_SERVER}}
        RUSEFI_SSH_SERVER: ${{secrets.RUSEFI_SSH_SERVER}}
        RUSEFI_SSH_USER: ${{secrets.RUSEFI_SSH_USER}}
        RUSEFI_SSH_PASS: ${{secrets.RUSEFI_SSH_PASS}}
        ADDITIONAL_ENV: ${{secrets.ADDITIONAL_ENV}}
