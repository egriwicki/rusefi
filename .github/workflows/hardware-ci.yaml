name: Firmware Hardware CI

on: [push, pull_request]

jobs:
  build-firmware:
    runs-on: self-hosted

    steps:
    - uses: actions/checkout@v1
      with:
        submodules: recursive

    - name: Generate Configs
      if: ${{ matrix.skip-config != 'yes' }}
      working-directory: ./firmware/
      run: |
        if [ "${{ matrix.build-target }}" = "kinetis" ]; then
          cd config/boards/kinetis/config
          bash gen_config.sh
          [ $? -eq 0 ] || { echo "ERROR generating board kinetis kin"; exit 1; }
        elif [ "${{ matrix.build-target }}" = "cypress" ]; then
          cd config/boards/hellen/cypress/config
          bash gen_config.sh
          [ $? -eq 0 ] || { echo "ERROR generating board hellen_cypress hellen_cypress"; exit 1; }
        else
          bash gen_config_board.sh ${{matrix.folder}} ${{matrix.build-target}}
        fi

    - name: Generate Enum Strings
      working-directory: ./firmware/
      run: bash gen_enum_to_string.sh

    - name: Generate Default config
      working-directory: ./firmware/
      run: bash gen_config_default.sh

    - name: Generate Live Documentation
      working-directory: ./firmware/
      run: bash gen_live_documentation.sh

    # Make sure the compiler works
    - name: Test Compiler
      run: arm-none-eabi-gcc -v

    - name: Build Firmware
      working-directory: ./firmware
      run: make -j16

    - name: OpenOCD wipe & flash STM32
      run: openocd -f "interface/stlink.cfg" -f "target/stm32f4x.cfg" -c "reset halt" -c "flash erase_sector 0 0 11" -c "program "firmware/build/rusefi.bin" verify reset exit 0x08000000"

    - name: Run Hardware CI
      working-directory: ./java_console
      run: ant real_hardware_functional_test
